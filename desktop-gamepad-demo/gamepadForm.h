/* Copyright 2015 CyberTech Labs Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file was modified by Yurii Litvinov to make it comply with the requirements of trikRuntime
 * project. See git revision history for detailed changes. */

#pragma once

#include <QWidget>
#include <QTcpSocket>
#include <QSignalMapper>

namespace Ui {
class GamepadForm;
}

/// GUI for TRIK Gamepad demo. Also contains all logic, which is not good, but this example is meant to be simple.
class GamepadForm : public QWidget
{
	Q_OBJECT

public:
	/// Constructor.
	GamepadForm();

	~GamepadForm() override;

private slots:
	/// Slot for "Connect" button.
	void on_connectButton_clicked();

	/// Slot for gamepad "magic" buttons.
	void onButtonPressed(int buttonId);

	/// Slot for pad buttons (Up, Down, Left, Right), triggered when button is pressed.
	void onPadPressed(const QString &action);

	/// Slot for pad buttons (Up, Down, Left, Right), triggered when button is released.
	void onPadReleased(int padId);

private:
	/// Helper method that enables or disables gamepad buttons depending on connection state.
	void setButtonsEnabled(bool enabled);

	/// Field with GUI automatically generated by gamepadForm.ui.
	Ui::GamepadForm *ui;

	/// TCP Socket object that handles network communication with TRIK.
	QTcpSocket mSocket;

	/// Mapper for "magic buttons", used here to fight copypaste --- we write only one slot for all buttons and use
	/// mapper to know which button was actually pressed in a slot. See QSignalMapper documentation for details.
	QSignalMapper mButtonsMapper;

	/// Mapper for pad keys, used here to track button down events.
	QSignalMapper mPadsDownMapper;

	/// Mapper for pad keys, used here to track button up events.
	QSignalMapper mPadsUpMapper;
};
