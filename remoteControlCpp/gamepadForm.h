/* Copyright 2015 Kudryavtsev Andrey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This project is modification of TRIK gamepad demo, created by Yurii Litvinov
 * https://github.com/trikset/trik-models/tree/master/desktop-gamepad-demo
 */

#pragma once

#include <QWidget>
#include <QTcpSocket>
#include <QSignalMapper>

namespace Ui {
class GamepadForm;
}

/// GUI for TRIK remote control. Also contains all logic, which is not good, but this example is meant to be simple.
class GamepadForm : public QWidget
{
	Q_OBJECT

public:
	/// Constructor.
	GamepadForm();

	~GamepadForm() override;

private slots:
	/// Slot for "Connect" button.
	void on_connectButton_clicked();

	/// Slot for extra buttons.
	void onButtonPressed(const QString &action);

private:
	/// Helper method that enables or disables move buttons depending on connection state.
	void setButtonsEnabled(bool enabled);

	/// Field with GUI automatically generated by gamepadForm.ui.
	Ui::GamepadForm *ui;

	/// TCP Socket object that handles network communication with TRIK.
	QTcpSocket mSocket;

	/// Mapper for extra buttons ("smile" and "hi"), used here to fight copypaste.
	/// We write only one slot for all buttons and use mapper to know
	/// which button was actually pressed in a slot.
	/// See QSignalMapper documentation for details.
	QSignalMapper mButtonsMapper;

	/// Mapper for move buttons, used here to track motion events.
	QSignalMapper mPadsMapper;
};
